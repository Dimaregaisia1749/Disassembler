command,Описание,Действие,Циклы,Code,Flags,Mask,Mask and,Mask xor,offset
"add Rd,Rr",Add two Registers,Rd←Rd+Rr,1,0000 11rd dddd rrrr,"Z,C,S,N,V,H",000011PPPPPPPPPP,1111110000000000,0000110000000000,0
"adc Rd,Rr",Add with Carry two Registers,Rd←Rd+Rr+C,1,0001 11rd dddd rrrr,"Z,C,S,N,V,H",000111PPPPPPPPPP,1111110000000000,0001110000000000,0
"adiw Rdl,K",Add Immediate to Word,Rdh:Rdl←Rdh:Rdl+K,2,1001 0110 KKdd KKKK,"Z,C,S,N,V",10010110PPPPPPPP,1111111100000000,1001011000000000,0
"sub Rd,Rr",Subtract two Registers,Rd←Rd-Rr,1,0001 10rd dddd rrrr,"Z,C,S,N,V,H",000110PPPPPPPPPP,1111110000000000,0001100000000000,0
"sbc Rd,Rr",Subtract with Carry two Registers,Rd←Rd-Rr-C,1,0000 10rd dddd rrrr,"Z,C,S,N,V,H",000010PPPPPPPPPP,1111110000000000,0000100000000000,0
"subi Rd,K",Subtract Constant from Register,Rd←Rd-K,1,0101 KKKK dddd KKKK,"Z,C,S,N,V,H",1010PPPPPPPPPPPP,1111000000000000,0101000000000000,0
"sbci Rd,K",Subtract with Carry Constant from Register,Rd←Rd-K-C,1,0100 KKKK dddd KKKK,"Z,C,S,N,V,H",0100PPPPPPPPPPPP,1111000000000000,0100000000000000,0
"sbiw Rdl,K",Subtract Immediate from Word,Rdh:Rdl←Rdh:Rdl-K,2,1001 0111 KKdd KKKK,"Z,C,S,N,V",10010111PPPPPPPP,1111111100000000,1001011100000000,0
"and Rd,Rr",Logical AND Registers,Rd←Rd AND Rr,1,0010 00rd dddd rrrr,"Z,S,N",001000PPPPPPPPPP,1111110000000000,0010000000000000,0
"andi Rd,K",Logical AND Register and Constant,Rd←Rd AND K,1,0111 KKKK dddd KKKK,"Z,S,N",0111PPPPPPPPPPPP,1111000000000000,0111000000000000,0
"or Rd,Rr",Logical OR Registers,Rd←Rd OR Rr,1,0010 10rd dddd rrrr,"Z,S,N",001010PPPPPPPPPP,1111110000000000,0010100000000000,0
"ori Rd,K",Logical OR Register and Constant,Rd←Rd OR K,1,0110 KKKK dddd KKKK,"Z,S,N",0110PPPPPPPPPPPP,1111000000000000,0110000000000000,0
"eor Rd,Rr",Exclusive OR Registers,Rd←Rd EOR Rr,1,0010 01rd dddd rrrr,"Z,S,N",001001PPPPPPPPPP,1111110000000000,0010010000000000,0
com Rd,One’s complement,Rd←0xFF-Rd,1,1001 010d dddd 0000,"Z,S,N",1001010PPPPP0000,1111111000001111,1001010000000000,0
neg Rd,Two’s complement,Rd←0x00-Rd,1,1001 010d dddd 0001,"Z,C,S,N,V,H",1001010PPPPP0001,1111111000001111,1001010000000001,0
"sbr Rd,K",Set Bit (s) in Register,Rd←Rd OR K,1,0110 KKKK dddd KKKK,"Z,S,N",0110PPPPPPPPPPPP,1111000000000000,0110000000000000,0
"cbr Rd,K",Clear Bit (s) in Register,Rd←Rd AND (0xFF- K),1,0111 KKKK dddd KKKK,"Z,S,N",0111PPPPPPPPPPPP,1111000000000000,0111000000000000,0
inc Rd,Increment,Rd←Rd+1,1,1001 010d dddd 0011,"Z,S,N,V",1001010PPPPP0011,1111111000001111,1001010000000011,0
dec Rd,Decrement,Rd←Rd-1,1,1001 010d dddd 1010,"Z,S,N,V",1001010PPPPP1010,1111111000001111,1001010000001010,0
tst Rd,Test for Zero or Minus,Rd←Rd AND Rd,1,0010 00dd dddd dddd,"Z,S,N",001000PPPPPPPPPP,1111110000000000,0010000000000000,0
clr Rd,Clear Register,Rd←Rd EOR Rd,1,0010 01dd dddd dddd,"Z,S,N",001001PPPPPPPPPP,1111110000000000,0010010000000000,0
ser Rd,Set Register,Rd←0xFF,1,1110 1111 dddd 1111,None,11101111PPPP1111,1111111100001111,1110111100001111,0
"mov Rd,Rr",Move Between Registers,Rd←Rr,1,0010 11rd dddd rrrr,None,001011PPPPPPPPPP,1111110000000000,0010110000000000,0
"movw Rd,Rr",Copy Register Word,Rd+1:Rd←Rr+1:Rr,1,0000 0001 dddd rrrr,None,00000001PPPPPPPP,1111111100000000,0000000100000000,0
"ldi Rd,K",Load Immediate,Rd←K,1,1110 KKKK dddd KKKK,None,1110PPPPPPPPPPPP,1111000000000000,1110000000000000,0
"ld Rd,X",Load Indirect,Rd← (X),2,1001 000d dddd 1100,None,1001000PPPPP1100,1111111000001111,1001000000001100,0
"ld Rd,X+",Load Indirect and Post-Inc.,"Rd← (X), X←X+1",2,1001 000d dddd 1101,None,1001000PPPPP1101,1111111000001111,1001000000001101,0
"ld Rd, -X",Load Indirect and Pre-Dec.,"X←X-1, Rd← (X)",2,1001 000d dddd 1110,None,1001000PPPPP1110,1111111000001111,1001000000001110,0
"ld Rd,Y",Load Indirect,Rd← (Y),2,1000 000d dddd 1000,None,1000000PPPPP1000,1111111000001111,1000000000001000,0
"ld Rd,Y+",Load Indirect and Post-Inc.,"Rd← (Y), Y←Y+1",2,1001 000d dddd 1001,None,1001000PPPPP1001,1111111000001111,1001000000001001,0
"ld Rd, -Y",Load Indirect and Pre-Dec.,"Y←Y-1, Rd← (Y)",2,1001 000d dddd 1010,None,1001000PPPPP1010,1111111000001111,1001000000001010,0
"ldd Rd,Y+q",Load Indirect with Displacement,Rd← (Y+q),2,10q0 qq0d dddd 1qqq,None,10P0PP0PPPPP1PPP,1101001000001000,1000000000001000,0
"ld Rd,Z",Load Indirect,Rd← (Z),2,1000 000d dddd 0000,None,1000000PPPPP0000,1111111000001111,1000000000000000,0
"ld Rd,Z+",Load Indirect and Post-Inc.,"Rd← (Z), Z←Z+1",2,1001 000d dddd 0001,None,1001000PPPPP0001,1111111000001111,1001000000000001,0
"ld Rd, -Z",Load Indirect and Pre-Dec.,"Z←Z-1, Rd← (Z)",2,1001 000d dddd 0010,None,1001000PPPPP0010,1111111000001111,1001000000000010,0
"ldd Rd,Z+q",Load Indirect with Displacement,Rd← (Z+q),2,10q0 qq0d dddd 0qqq,None,10P0PP0PPPPP0PPP,1101001000001000,1000000000000000,0
"lds Rd,k",Load Direct from SRAM,Rd← (k),2,1001 000d dddd 0000kkkk kkkk kkkk kkkk,None,1001000PPPPP0000PPPPPPPPPPPPPPPP,11111110000011110000000000000000,10010000000000000000000000000000,0
"st X,Rr",Store Indirect,(X) ←Rr,2,1001 001r rrrr 1100,None,1001001PPPPP1100,1111111000001111,1001001000001100,0
"st X+,Rr",Store Indirect and Post-Inc.,"(X) ←Rr, X←X+1",2,1001 001r rrrr 1101,None,1001001PPPPP1101,1111111000001111,1001001000001101,0
"st -X,Rr",Store Indirect and Pre-Dec.,"X←X-1, (X) ←Rr",2,1001 001r rrrr 1110,None,1001001PPPPP1110,1111111000001111,1001001000001110,0
"st Y,Rr",Store Indirect,(Y) ←Rr,2,1000 001r rrrr 1000,None,1000001PPPPP1000,1111111000001111,1000001000001000,0
"st Y+,Rr",Store Indirect and Post-Inc.,"(Y) ←Rr, Y←Y+1",2,1001 001r rrrr 1001,None,1001001PPPPP1001,1111111000001111,1001001000001001,0
"st -Y,Rr",Store Indirect and Pre-Dec.,"Y←Y-1, (Y) ←Rr",2,1001 001r rrrr 1010,None,1001001PPPPP1010,1111111000001111,1001001000001010,0
"std Y+q,Rr",Store Indirect with Displacement,(Y+q) ← Rr,2,10q0 qq1r rrrr 1qqq,None,10P0PP1PPPPP1PPP,1101001000001000,1000001000001000,0
"st Z,Rr",Store Indirect,(Z) ←Rr,2,1000 001r rrrr 0000,None,1000001PPPPP0000,1111111000001111,1000001000000000,0
"st Z+,Rr",Store Indirect and Post-Inc.,"(Z) ←Rr, Z←Z+1",2,1001 001r rrrr 0001,None,1001001PPPPP0001,1111111000001111,1001001000000001,0
"st -Z,Rr",Store Indirect and Pre-Dec.,"Z←Z-1, (Z) ←Rr",2,1001 001r rrrr 0010,None,1001001PPPPP0010,1111111000001111,1001001000000010,0
"std Z+q,Rr",Store Indirect with Displacement,(Z+q) ← Rr,2,10q0 qq1r rrrr 0qqq,None,10P0PP1PPPPP0PPP,1101001000001000,1000001000000000,0
"sts k,Rr",Store Direct to SRAM,(k) ←Rr,2,1001 001r rrrr 0000kkkk kkkk kkkk kkkk,None,1001001PPPPP0000PPPPPPPPPPPPPPPP,11111110000011110000000000000000,10010010000000000000000000000000,0
lpm,Load Program Memory,R0← (Z),3,1 001 010 111 001 000,None,1001010111001000,1111111111111111,1001010111001000,0
"lpm Rd,Z",Load Program Memory,Rd← (Z),3,1001 000d dddd 0100,None,1001000PPPPP0100,1111111000001111,1001000000000100,0
"lpm Rd,Z+",Load Program Memory and Post-Inc.,"Rd← (Z), Z←Z+1",3,1001 000d dddd 0101,None,1001000PPPPP0101,1111111000001111,1001000000000101,0
spm,Store Program Memory,(Z) ←R1:R0,—,1 001 010 111 101 000,None,1001010111101000,1111111111111111,1001010111101000,0
"in Rd,P",In Port,Rd←P,1,1011 0PPd dddd PPPP,None,10110PPPPPPPPPPP,1111100000000000,1011000000000000,0
"out P,Rr",Out Port,P←Rr,1,1011 1PPr rrrr PPPP,None,10111PPPPPPPPPPP,1111100000000000,1011100000000000,0
push Rr,Push Register in Stack,"STACK←Rr, SP←SP-1",2,1001 001r rrrr 1111,None,1001001PPPPP1111,1111111000001111,1001001000001111,0
pop Rd,Pop Register from Stack,"SP←SP+1, Rd←STACK",2,1001 000d dddd 1111,None,1001000PPPPP1111,1111111000001111,1001000000001111,0
rjmp k,Relative Jump,PC←PC+k+1,2,1100 kkkk kkkk kkkk,None,1100PPPPPPPPPPPP,1111000000000000,1100000000000000,1
ijmp,Indirect Jump to (Z),PC← (Z),2,1 001 010 000 001 000,None,1001010000001000,1111111111111111,1001010000001000,0
*jmp k,Direct Jump,PC←k,3,1001 010k kkkk 110kkkkk kkkk kkkk kkkk,None,1001010PPPPP110PPPPPPPPPPPPPPPPP,11111110000011100000000000000000,10010100000011000000000000000000,1
rcall k,Relative Subroutine Call,"STACK←PC+1,PC←PC+k+1,SP←SP-2 or 3",¾,1101 kkkk kkkk kkkk,None,1101PPPPPPPPPPPP,1111000000000000,1101000000000000,1
icall,Indirect Call to (Z),"STACK←PC+1, PC← (Z),SP←SP-2 or 3",¾,1 001 010 100 001 000,None,1001010100001000,1111111111111111,1001010100001000,0
*call k,Direct Subroutine Call,"STACK←PC+1, PC←k,SP←SP-2 or 3",4,1001 010k kkkk 111kkkkk kkkk kkkk kkkk,None,1001010PPPPP111PPPPPPPPPPPPPPPPP,11111110000011100000000000000000,10010100000011100000000000000000,1
ret,Subroutine Return,"PC←STACK, SP←SP+2 or 3",4,1 001 010 100 001 000,None,1001010100001000,1111111111111111,1001010100001000,0
reti,Interrupt Return,"PC←STACK, SP←SP+2 or 3",4,1 001 010 100 011 000,I,1001010100011000,1111111111111111,1001010100011000,0
"cpse Rd,Rr","Compare, Skip if Equal",if (Rd=Rr) PC←PC+2 or 3,½/3,0001 00rd dddd rrrr,None,000100PPPPPPPPPP,1111110000000000,0001000000000000,0
"cp Rd,Rr",Compare,Rd-Rr,1,0001 01rd dddd rrrr,"Z,C,S,N,V,H",000101PPPPPPPPPP,1111110000000000,0001010000000000,0
"cpc Rd,Rr",Compare with Carry,Rd-Rr-C,1,0000 01rd dddd rrrr,"Z,C,S,N,V,H",000001PPPPPPPPPP,1111110000000000,0000010000000000,0
"cpi Rd,K",Compare Register with Immediate,Rd-Rr-K,1,0011 KKKK dddd KKKK,"Z,C,S,N,V,H",0011PPPPPPPPPPPP,1111000000000000,0011000000000000,0
"sbrc Rr,b",Skip if Bit in Register is Cleared,if (Rr (b)=0) PC←PC+2 or 3,½/3,1111 110r rrrr obbb,None,1111110PPPPP0PPP,1111111000001000,1111110000000000,0
"sbrs Rr,b",Skip if Bit in Register is Set,if (Rr (b)=1) PC←PC+2 or 3,½/3,1111 111r rrrr obbb,None,1111111PPPPP0PPP,1111111000001000,1111111000000000,0
"sbic P,b",Skip if Bit in IO Register is Cleared,if (P (b)=0) PC←PC+2 or 3,½/3,1001 1001 PPPP Pbbb,None,10011001PPPPPPPP,1111111100000000,1001100100000000,1
"sbis P,b",Skip if Bit in IO Register is Set,if (P (b)=1) PC←PC+2 or 3,½/3,1001 1011 PPPP Pbbb,None,10011011PPPPPPPP,1111111100000000,1001101100000000,0
"brbc s,k",Branch if Status Register is Cleared,if (SREG (s)=0) PC←PC+k+1,½,1111 01kk kkkk ksss,None,111101PPPPPPPPPP,1111110000000000,1111010000000000,1
"brbs s,k",Branch if Status Flag is Set,if (SREG (s)=1) PC←PC+k+1,½,1111 00kk kkkk ksss,None,111100PPPPPPPPPP,1111110000000000,1111000000000000,1
brcc k,Branch if Carry Register is Cleared,if (C=0) PC←PC+k+1,½,1111 01kk kkkk k000,None,111101PPPPPPP000,1111110000000111,1111010000000000,0
brcs k,Branch if Carry Flag is Set,if (C=1) PC←PC+k+1,½,1111 00kk kkkk k000,None,111100PPPPPPP000,1111110000000111,1111000000000000,0
brsh k,Branch if Same or Higher,if (C=0) PC←PC+k+1,½,1111 01kk kkkk k000,None,111101PPPPPPP000,1111110000000111,1111010000000000,0
brlo k,Branch if Lower,if (C=1) PC←PC+k+1,½,1111 00kk kkkk k000,None,111100PPPPPPP000,1111110000000111,1111000000000000,0
brne k,Branch if Not Equal,if (Z=0) PC←PC+k+1,½,1111 01kk kkkk k001,None,111101PPPPPPP001,1111110000000111,1111010000000001,0
breq k,Branch if Equal,if (Z=1) PC←PC+k+1,½,1111 00kk kkkk k001,None,111100PPPPPPP001,1111110000000111,1111000000000001,0
brpl k,Branch if Plus,if (N=0) PC←PC+k+1,½,1111 01kk kkkk k010,None,111101PPPPPPP010,1111110000000111,1111010000000010,0
brmi k,Branch if Minus,if (N=1) PC←PC+k+1,½,1111 00kk kkkk k010,None,111100PPPPPPP010,1111110000000111,1111000000000010,0
brvc k,Bruach if Overflow Flag is Cleared,if (V=0) PC←PC+k+1,½,1111 01kk kkkk k011,None,111101PPPPPPP011,1111110000000111,1111010000000011,0
brvs k,Branch if Overflow Flag is Set,if (V=1) PC←PC+k+1,½,1111 00kk kkkk k011,None,111100PPPPPPP011,1111110000000111,1111000000000011,0
brge k,"Branch if Greate or Equal, Signed",if (S=0) PC←PC+k+1,½,1111 01kk kkkk k100,None,111101PPPPPPP100,1111110000000111,1111010000000100,0
brlt k,"Branch if Less than Zero, Signed",if (S=1) PC←PC+k+1,½,1111 00kk kkkk k100,None,111100PPPPPPP100,1111110000000111,1111000000000100,0
brhc k,Branch if Half Carry Flag is Cleared,if (H=0) PC←PC+k+1,½,1111 01kk kkkk k101,None,111101PPPPPPP101,1111110000000111,1111010000000101,0
brhs k,Branch if Half Carry Flag is Set,if (H=1) PC←PC+k+1,½,1111 00kk kkkk k101,None,111100PPPPPPP101,1111110000000111,1111000000000101,0
brtc k,Branch if Transfer Flag is Cleared,if (T=0) PC←PC+k+1,½,1111 01kk kkkk k110,None,111101PPPPPPP110,1111110000000111,1111010000000110,0
brts k,Branch if Transfer Flag is Set,if (T=1) PC←PC+k+1,½,1111 00kk kkkk k110,None,111100PPPPPPP110,1111110000000111,1111000000000110,0
brid k,Branch if Interrupt Disable,if (T=0) PC←PC+k+1,½,1111 01kk kkkk k111,None,111101PPPPPPP111,1111110000000111,1111010000000111,0
brie k,Branch if Interrupt Enable,if (T=1) PC←PC+k+1,½,1111 00kk kkkk k111,None,111100PPPPPPP111,1111110000000111,1111000000000111,0
"sbi P,b",Set Bit in I/O Rerister,"I/O (P,b) ←1",2,1001 1010 PPPP Pbbb,None,10011010PPPPPPPP,1111111100000000,1001101000000000,0
"cbi P,b",Clear Bit in I/ORerister,"I/O (P,b) ←0",2,1001 1000 PPPP Pbbb,None,10011000PPPPPPPP,1111111100000000,1001100000000000,0
lsl Rd,Logical Shift Left,"Rd (n+1) ←Rd (n), Rd (0) ←0",1,0000 11dd dddd dddd,"Z,C,N,V",000011PPPPPPPPPP,1111110000000000,0000110000000000,0
lsr Rd,Logical Shift Right,"Rd (n) ←Rd (n+1), Rd (7) ←0",1,1001 010d dddd 0110,"Z,C,N,V",1001010PPPPP0110,1111111000001111,1001010000000110,0
rol Rd,Rotate Left through Carry,"Rd (0) ←C, Rd (n+1) ←Rd (n), C←Rd (7)",1,0001 11dd dddd dddd,"Z,C,N,V",000111PPPPPPPPPP,1111110000000000,0001110000000000,0
ror Rd,Rotate Right through Carry,"Rd (7) ←C, Rd (n) ←Rd (n+1), C←Rd (0)",1,1001 010d dddd 0111,"Z,C,N,V",1001010PPPPP0111,1111111000001111,1001010000000111,0
asr Rd,Arithmetic Shift Right,"Rd (n) ←Rd (n+1), n=0…6",1,1001 010d dddd 0101,"Z,C,N,V",1001010PPPPP0101,1111111000001111,1001010000000101,0
swap Rd,Swap Nibbles,"Rd (3…0) ←Rd (7…4),Rd (7…4) ←Rd (3…0)",1,1001 010d dddd 0010,None,1001010PPPPP0010,1111111000001111,1001010000000010,0
"bst Rr,b",Bit Store from Rerister to T,T←Rr (b),1,1111 101b bbbb 0bbb,T,1111101PPPPP0PPP,1111111000001000,1111101000000000,0
"bld Rd,b",Bit Load from T to Rerister,Rd (b) ←T,1,1111 100b bbbb 0bbb,None,1111100PPPPP0PPP,1111111000001000,1111100000000000,0
bset s,Flag Set,SREG (s) ←1,1,1001 0100 0sss 1000,SREG (s),100101000PPP1000,1111111110001111,1001010000001000,0
bclr s,Flag Clear,SREG (s) ←0,1,1001 0100 1sss 1000,SREG (s),100101001PPP1000,1111111110001111,1001010010001000,0
sec,Set Carry,C←1,1,1 001 010 000 001 000,C,1001010000001000,1111111111111111,1001010000001000,0
clc,Clear Carry,C←0,1,1 001 010 010 001 000,C,1001010010001000,1111111111111111,1001010010001000,0
sez,Set Zero Flag,Z←1,1,1 001 010 000 011 000,Z,1001010000011000,1111111111111111,1001010000011000,0
clz,Clear Zero Flag,Z←0,1,1 001 010 010 011 000,Z,1001010010011000,1111111111111111,1001010010011000,0
sen,Set Negative Flag,N←1,1,1 001 010 000 101 000,N,1001010000101000,1111111111111111,1001010000101000,0
cln,Clear Negative Flag,N←0,1,1 001 010 010 101 000,N,1001010010101000,1111111111111111,1001010010101000,0
sev,Set Twos Complement Overflow,V←1,1,1 001 010 000 111 000,V,1001010000111000,1111111111111111,1001010000111000,0
clv,Clear Twos Complement Overflow,V←0,1,1 001 010 010 111 000,V,1001010010111000,1111111111111111,1001010010111000,0
ses,Set Signed Test Flag,S←1,1,1 001 010 001 001 000,S,1001010001001000,1111111111111111,1001010001001000,0
cls,Clear Signed Test Flag,S←0,1,1 001 010 011 001 000,S,1001010011001000,1111111111111111,1001010011001000,0
seh,Set Half Carry Flag,H←1,1,1 001 010 001 011 000,H,1001010001011000,1111111111111111,1001010001011000,0
clh,Clear Half Carry Flag,H←0,1,1 001 010 011 011 000,H,1001010011011000,1111111111111111,1001010011011000,0
set,Set Transfer bit,T←1,1,1 001 010 001 101 000,T,1001010001101000,1111111111111111,1001010001101000,0
clt,Clear Transfer bit,T←0,1,1 001 010 011 101 000,T,1001010011101000,1111111111111111,1001010011101000,0
sei,Global Interrupt Enable,I←1,1,1 001 010 001 111 000,I,1001010001111000,1111111111111111,1001010001111000,0
cli,Global Interrupt Disable,I←0,1,1 001 010 011 111 000,I,1001010011111000,1111111111111111,1001010011111000,0
nop,No operation,—,1,0000 0000 0000 0000,None,0000000000000000,1111111111111111,0000000000000000,0
sleep,Sleep,—,1,1 001 010 110 001 000,None,1001010110001000,1111111111111111,1001010110001000,0
wdr,Watchdog Reset,—,1,1 001 010 110 101 000,None,1001010110101000,1111111111111111,1001010110101000,0